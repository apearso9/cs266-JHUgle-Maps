Allison Pearson
cs226 HW8

==============================================================================
OVERALL FUNCTIONALITY

For Sparse Graph, I tried to keep the implementation as simple as possible.
My insert vertex method is very basic, and just lets the user add their variable
type of choice as the data for a new vertex. The edge insert method makes sure
that both given vertices actually exist in the graph, then ensures that the
desired edge is not a self-loop or a duplicate. To check for a duplicate edge,
I created a function that iterates through all outgoing edges of the "from"
vertex. For each outgoing edge, it makes sure the "to" is not the same as the
original "to"; if this is the case, then the edge the user is trying to insert
already exists in the graph. This is more efficient than going through every
edge in the graph but works just as well. Remove edge just makes sure that the
edge exists in the graph and then removes it; remove vertex makes sure the vertex
exists and that its list of outgoing/incoming edges is empty. The iterators for
incoming, outgoing, vertices, and edges makes a hard copy of the original list
and returns it as an iterator, so the user can view the contents of the list but
not actually change them. From and to simply return the desired vertex of the
given edge, and label either gets or sets the label object of a vertex/edge.
Clear labels goes through all the vertices and edges and sets their labels to null.

For implementing Dijkstra's Method in StreetSearcher, my program first goes
through all the vertices of their graph and sets their distances to the maximum
value. It then makes the distance of the starting vertex 0, because clearly the
distance from the start vertex to itself is 0. Then, a priority queue is created
and the start vertex is added to it.
The program then enters a loop that continues while the priority queue isn't
empty (while there are still vertices left to be visited.) It removes the min
vertex from the priority queue, and puts that vertex into the "checkNeighbors"
method.
The checkNeighbors method only checks the unvisited neighbors of the vertex (I
do this by adding a boolean to the VertexNode called "visited"). Then, it creates
a potential new distance by adding the distance of the current vertex to the
distance of that added edge. If that potential new distance is less than the
distance of that edge's "to" vertex, then its distance is replaced by the potential
new distance. This loop continues for all of the unvisited neighbors of the original
vertex. I also put in a statement that checks to see if a vertex is the same as
the goal vertex from the original method. If so, then the program breaks and sets
the final distance of the whole path equal to the distance stored in the goal
vertex. This statement makes it so that the program doesn't go through the whole
graph in order to find the one specific path.

=================================================================================

PART C: TOURING AROUND CHARM CITY

---------------------------------------------------------------------------------

JHU TO DRUID LAKE:

Total Distance: 8818.5187 meters

45662: 121.596
40816: 137.149
40867:N_CHARLES_ST 318.9
42002:E_33RD_ST 60.4909
8344:3200_BLK_N_CHARLES_ST 293.14
11147:3200_BLK_N_CHARLES_ST 318.96
39907:ART_MUSEUM_DR 151.623
48094:UNIT__BLK_ART_MUSEUM_DR 664.997
43910:ART_MUSEUM_DR 129.551
46364:WYMAN_PARK_DR 213.639
26692:2900_BLK_WYMAN_PARK_DR 255.018
39554:N_HOWARD_ST 42.0276
26872:200_BLK_W_29TH_ST 136.521
26712:200_BLK_W_29TH_ST 146.673
15177:200_BLK_W_29TH_ST 167.427
11871:200_BLK_W_29TH_ST 230.864
14691:300_BLK_W_29TH_ST 196.683
30101:300_BLK_W_29TH_ST 224.608
5917:300_BLK_W_29TH_ST 123.841
21125:300_BLK_W_29TH_ST 79.8048
21194:400_BLK_W_29TH_ST 78.1632
17656:400_BLK_W_29TH_ST 115.904
26121:500_BLK_W_29TH_ST 600.366
14609:2900_BLK_SISSON_ST 480.413
23569:700_BLK_WYMAN_PARK_DR 284.616
18109:800_BLK_WYMAN_PARK_DR 394.118
31600:900_BLK_WYMAN_PARK_DR 281.962
33121:900_BLK_WYMAN_PARK_DR 39.0298
34391:1000_BLK_WYMAN_PARK 71.1794
41471:EAST_DR 1160.95
43386:UNNAMED_ST 190.654
41640: 1107.65

Run 1 | 662 ms | 28161 kb
------|--------|----------
Run 2 | 595 ms | 28204 kb
------|--------|----------
Run 3 | 608 ms | 28171 kb
------|--------|----------
 Avg  | 622 ms | 28179 kb

---------------------------------------------------------------------------------

7-11 TO DRUID LAKE:

Total Distance: 5827.3652 meters

24509:2800_BLK_REMINGTON_AVE 397.423
14691:300_BLK_W_29TH_ST 196.683
30101:300_BLK_W_29TH_ST 224.608
5917:300_BLK_W_29TH_ST 123.841
21125:300_BLK_W_29TH_ST 79.8048
21194:400_BLK_W_29TH_ST 78.1632
17656:400_BLK_W_29TH_ST 115.904
26121:500_BLK_W_29TH_ST 600.366
14609:2900_BLK_SISSON_ST 480.413
23569:700_BLK_WYMAN_PARK_DR 284.616
18109:800_BLK_WYMAN_PARK_DR 394.118
31600:900_BLK_WYMAN_PARK_DR 281.962
33121:900_BLK_WYMAN_PARK_DR 39.0298
34391:1000_BLK_WYMAN_PARK 71.1794
41471:EAST_DR 1160.95
43386:UNNAMED_ST 190.654
41640: 1107.65

Run 1 | 639 ms | 28252 kb
------|--------|----------
Run 2 | 603 ms | 28225 kb
------|--------|----------
Run 3 | 604 ms | 27812 kb
------|--------|----------
 Avg  | 615 ms | 28096 kb

---------------------------------------------------------------------------------

INNER HARBOR TO JHU:

Total Distance: 16570.4909 meters

20226:100_BLK_SOUTH_ST 462.642
48137:UNIT__BLK_SOUTH_ST 163.038
47386:UNIT__BLK_SOUTH_ST 71.8061
47419:UNIT__BLK_SOUTH_ST 158.76
47548:UNIT__BLK_SOUTH_ST 271.099
47459:UNIT__BLK_GUILFORD_AVE 268.592
28621:200_BLK_E_FAYETTE_ST 343.863
33813:100_BLK_N_CALVERT_ST 296.815
28959:200_BLK_N_CALVERT_ST 134.194
24432:200_BLK_N_CALVERT_ST 299.369
23235:300_BLK_N_CALVERT_ST 454.205
9313:300_BLK_N_CALVERT_ST 147.987
5947:400_BLK_N_CALVERT_ST 185.357
30373:100_BLK_ORLEANS_ST 151.147
31819:100_BLK_ORLEANS_ST 156.75
36462:400_BLK_SAINT_PAUL_PL 165.177
33237:500_BLK_SAINT_PAUL_PL 199.955
42343:SAINT_PAUL_PL 50.1383
35069:500_BLK_SAINT_PAUL_PL 204.024
27667:600_BLK_SAINT_PAUL_ST 369.081
23282:600_BLK_SAINT_PAUL_ST 67.5841
8359:700_BLK_SAINT_PAUL_ST 63.1906
31442:700_BLK_SAINT_PAUL_ST 201.99
22312:700_BLK_SAINT_PAUL_ST 120.044
24117:800_BLK_SAINT_PAUL_ST 164.639
2462:800_BLK_SAINT_PAUL_ST 58.6525
14582:800_BLK_SAINT_PAUL_ST 163.169
16051:900_BLK_SAINT_PAUL_ST 347.582
17769:900_BLK_SAINT_PAUL_ST 147.308
34028:1000_BLK_SAINT_PAUL_ST 159.482
8766:1000_BLK_SAINT_PAUL_ST 341.452
1691:1100_BLK_SAINT_PAUL_ST 383.173
4356:1200_BLK_SAINT_PAUL_ST 386.857
19656:1300_BLK_SAINT_PAUL_ST 338.907
40957:SAINT_PAUL_ST 42.1892
44623:SAINT_PAUL_ST 46.2985
39136:RAMP 216.46
43462:I_83___S 338.926
45367:I_83___S 92.1278
40942:N_CHARLES_ST 107.277
40898:N_CHARLES_ST 123.62
13325:1500_BLK_N_CHARLES_ST 468.441
4876:1700_BLK_N_CHARLES_ST 386.864
22851:1800_BLK_N_CHARLES_ST 212.368
8607:1800_BLK_N_CHARLES_ST 244.034
20118:1800_BLK_N_CHARLES_ST 46.5814
19448:1900_BLK_N_CHARLES_ST 382.666
11838:2000_BLK_N_CHARLES_ST 366.721
1734:2100_BLK_N_CHARLES_ST 367.718
26449:2200_BLK_N_CHARLES_ST 376.143
5511:2300_BLK_N_CHARLES_ST 393.435
18280:2400_BLK_N_CHARLES_ST 239.671
2083:2400_BLK_N_CHARLES_ST 99.9705
30800:2400_BLK_N_CHARLES_ST 204.48
28376:2500_BLK_N_CHARLES_ST 209.449
10673:2500_BLK_N_CHARLES_ST 75.712
18381:2500_BLK_N_CHARLES_ST 102.259
25136:2500_BLK_N_CHARLES_ST 165.686
8403:2600_BLK_N_CHARLES_ST 467.965
21531:2700_BLK_N_CHARLES_ST 467.022
21565:2800_BLK_N_CHARLES_ST 465.662
42406:N_CHARLES_ST 231.863
41710:N_CHARLES_ST 166.742
39032:N_CHARLES_ST 64.0439
41330:N_CHARLES_ST 240.143
44412:N_CHARLES_ST 233.966
44001:N_CHARLES_ST 195.676
44656:N_CHARLES_ST 205.021
42144:N_CHARLES_ST 202.146
42334:N_CHARLES_ST 245.469
40867:N_CHARLES_ST 318.9
40816: 137.149
45662: 121.596

Run 1 | 812 ms | 28886 kb
------|--------|----------
Run 2 | 736 ms | 28869 kb
------|--------|----------
Run 3 | 751 ms | 28852 kb
------|--------|----------
 Avg  | 766 ms | 28869 kb

---------------------------------------------------------------------------------

ANALYSIS

As can be seen in the charts above, the average runtime varied between each desired
path. JHU to Druid Lake took around 622 ms and 28179 kb; 7-11 to Druid Lake took
around 615 ms and 28096 kb; Inner Harbor to JHU took 766 ms and 28869 kb.

Even though these are all in the same graph, the runtime varies widely for several
reasons. First, a longer path will naturally take longer to run because the program
must go through more edges and vertices before the goal is reached. Clearly from the
printed paths, the longer paths take longer to compute, like Inner Harbor to JHU.
A second reason for a longer runtime (and more space taken up) depends on the
vertices that the path goes through. If this particular path has many vertices with
lots of neighbors, it will take a lot longer to iterate through all of those neighbors
to update the distances and find the shortest path. This will also take up more space
in the program, because the more neighbors a vertex has, the more things will be
added to the priority queue, so more space is required.

=================================================================================